{"version":3,"sources":["logo.svg","components/Header.js","components/Calculator.js","components/MemeGenerator.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Calculator","React","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayText","variableOne","variableTwo","action","clear","historyText","addToDisplay","bind","assertThisInitialized","clearDisplay","deleteLastChar","gcd","lcm","result","event","innerText","target","setState","prevState","length","slice","max","i","_this2","parseInt","calculateGCD","calculateLCM","className","type","value","readOnly","onClick","style","width","rows","Footer","class","App","components_Header","components_Calculator","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85c81f0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Header() {\r\n   // return (<header>\r\n    //    <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" />\r\n      //  <p>Meme Generator</p>\r\n    //</header>)\r\n    return (<header>\r\n            <p>LCM/GCD Calculator</p>\r\n        </header>)\r\n}\r\nexport default Header","import React from \"react\"\r\nimport { relative } from \"path\";\r\n\r\nclass Calculator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            displayText:\"\",\r\n            variableOne: 0,\r\n            variableTwo: 0,\r\n            action:\"\", \r\n            clear: false,\r\n            historyText:\"\"\r\n        }\r\n        this.addToDisplay = this.addToDisplay.bind(this)\r\n        this.clearDisplay = this.clearDisplay.bind(this)\r\n        this.deleteLastChar = this.deleteLastChar.bind(this)\r\n        this.gcd = this.gcd.bind(this)\r\n        this.lcm = this.lcm.bind(this)\r\n        this.result = this.result.bind(this)\r\n    }\r\n\r\n    addToDisplay(event) {\r\n        const {innerText} = event.target\r\n        this.setState((prevState) => {\r\n            if(prevState.clear)\r\n                return{\r\n                    displayText: innerText,\r\n                    clear: false\r\n                }\r\n            else if(prevState.displayText.length < 10)  \r\n                return { displayText : prevState.displayText + innerText}\r\n    })\r\n    }\r\n\r\n    clearDisplay(event) {\r\n        this.setState({ \r\n            displayText : \"\"\r\n        })\r\n    }\r\n\r\n    deleteLastChar(event) {\r\n        this.setState((prevState) => {\r\n            return { \r\n            displayText : prevState.displayText.slice(0, -1)\r\n            }\r\n        })\r\n    }\r\n          \r\n    gcd(event) {\r\n        this.setState((prevState) => { \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"gcd\",\r\n            historyText: prevState.displayText + \" GCD \"\r\n            }\r\n        })\r\n    }\r\n\r\n    lcm(event) {\r\n        this.setState((prevState) => { \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"lcm\",\r\n            historyText: prevState.displayText + \" LCM \"\r\n            }\r\n        })\r\n    }\r\n\r\n    calculateGCD(variableOne,variableTwo) {\r\n        if (variableOne === 0 || variableTwo === 0)\r\n            return 0\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableTwo\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableOne\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    calculateLCM(variableOne,variableTwo) {\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableOne\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableTwo\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n            result *= variableOne * variableTwo\r\n        }\r\n        return result\r\n    }\r\n\r\n    result(event) {\r\n        this.setState((prevState) => {\r\n            let variableOne = parseInt(prevState.variableOne)\r\n            if (prevState.displayText === \"\")\r\n                prevState.displayText = 0\r\n                let variableTwo = parseInt(prevState.displayText)  \r\n                if(prevState.action === \"gcd\"){\r\n                let result = this.calculateGCD(variableOne,variableTwo)\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    clear: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n\r\n                }\r\n                else if(prevState.action == \"lcm\"){      \r\n                let result = this.calculateLCM(variableOne,variableTwo)\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    clear: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n                }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator\" >\r\n            \r\n                <input type=\"text\" value={this.state.displayText} className=\"display\"\r\n                 readOnly></input>\r\n                 <br/>\r\n                 <div className=\"inputBoxes\">\r\n                    <div className=\"row\">\r\n                        <button onClick={this.addToDisplay}>1</button>\r\n                        <button onClick={this.addToDisplay}>2</button>\r\n                        <button onClick={this.addToDisplay}>3</button>\r\n                        <button onClick={this.addToDisplay}>4</button>\r\n                        <button onClick={this.addToDisplay}>5</button>\r\n                        <button onClick={this.clearDisplay}>C</button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <button onClick={this.addToDisplay}>6</button>\r\n                    <button onClick={this.addToDisplay}>7</button>\r\n                    <button onClick={this.addToDisplay}>8</button>\r\n                    <button onClick={this.addToDisplay}>9</button>\r\n                    <button onClick={this.addToDisplay}>0</button>\r\n                    <button onClick={this.deleteLastChar}> &#8592; </button>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                    <button onClick={this.gcd}>GCD</button>\r\n                    <button onClick={this.lcm}>LCM</button>{\r\n                    //<button onClick={this.lcm}>Prime?</button>\r\n                    //<button onClick={this.lcm}>Perfect Square?</button>\r\n                    }\r\n                    <button onClick={this.result} style={{width:1.28+'em'}}>=</button>\r\n                    </div>\r\n                   \r\n                </div>\r\n                <textarea rows=\"1\" value={this.state.historyText} readOnly\r\n                     className=\"history\"></textarea>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator","import React from 'react'\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            topText:\"\",\r\n            bottomText:\"\",\r\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.genMeme = this.genMeme.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => { \r\n            const {memes} = response.data\r\n            console.log(memes)\r\n            this.setState({allMemeImgs:memes})\r\n        })\r\n    }\r\n\r\n     handleChange(event) {\r\n        const {name,value} = event.target\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    genMeme(event){\r\n        event.preventDefault()\r\n        const r = Math.floor(Math.random()*(this.state.allMemeImgs.length-1))\r\n        const url = this.state.allMemeImgs[r].url\r\n        console.log('url',url)\r\n        this.setState({randomImage: url})\r\n    }\r\n\r\n    render() {\r\n    return (<div>\r\n        <form className=\"meme-form\">\r\n        <label>\r\n        Top Text\r\n        <input type=\"text\" name=\"topText\" value={this.state.topText}\r\n         onChange={this.handleChange}/>       \r\n        </label>\r\n        <label>\r\n        Bottom Text\r\n        <input type=\"text\" name=\"bottomText\" value={this.state.bottomText}\r\n         onChange={this.handleChange}/>\r\n        </label>\r\n        <button onClick={this.genMeme}>Gen</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n            <img src={this.state.randomImage} alt=\"\" />\r\n            <h2 className=\"top\">{this.state.topText}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n    </div>)\r\n}\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n                <div class=\"container\">\r\n                    <p></p>\r\n                </div>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header.js'\nimport MemeGenerator from './components/MemeGenerator.js'\nimport Calculator from './components/Calculator.js'\nimport Footer from './components/Footer.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <Header />\n        <Calculator />\n        {\n          // <Header />\n        //<MemeGenerator />\n        }\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}