{"version":3,"sources":["logo.svg","components/Header.js","components/MemeGenerator.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","src","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImage","allMemeImgs","handleChange","bind","assertThisInitialized","genMeme","_this2","fetch","then","response","json","memes","data","console","log","setState","event","_event$target","target","name","value","defineProperty","preventDefault","r","Math","floor","random","length","url","className","type","onChange","onClick","alt","React","Component","Footer","class","App","components_Header","components_MemeGenerator","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCSzBC,MAPf,WACI,OAAQC,EAAAC,EAAAC,cAAA,cACJF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,mEACTH,EAAAC,EAAAC,cAAA,2CC2DOE,cA7DX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACRC,QAAQ,GACRC,WAAW,GACXC,YAAa,gCACbC,YAAa,IAEjBX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,QAAUf,EAAKe,QAAQF,KAAbZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KATLA,mFAYK,IAAAgB,EAAAb,KACfc,MAAM,qCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACPE,EAASF,EAASG,KAAlBD,MACPE,QAAQC,IAAIH,GACZL,EAAKS,SAAS,CAACd,YAAYU,2CAIrBK,GAAO,IAAAC,EACID,EAAME,OAApBC,EADUF,EACVE,KAAKC,EADKH,EACLG,MACZ3B,KAAKsB,SAALxB,OAAA8B,EAAA,EAAA9B,CAAA,GACK4B,EAAQC,oCAITJ,GACJA,EAAMM,iBACN,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAUjC,KAAKI,MAAMI,YAAY0B,OAAO,IAC5DC,EAAMnC,KAAKI,MAAMI,YAAYsB,GAAGK,IACtCf,QAAQC,IAAI,MAAMc,GAClBnC,KAAKsB,SAAS,CAACf,YAAa4B,qCAIhC,OAAQ3C,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,QAAM0C,UAAU,aAChB5C,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOX,KAAK,UAAUC,MAAO3B,KAAKI,MAAMC,QACnDiC,SAAUtC,KAAKS,gBAEhBjB,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOX,KAAK,aAAaC,MAAO3B,KAAKI,MAAME,WACtDgC,SAAUtC,KAAKS,gBAEhBjB,EAAAC,EAAAC,cAAA,UAAQ6C,QAASvC,KAAKY,SAAtB,QAEApB,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,QACX5C,EAAAC,EAAAC,cAAA,OAAKC,IAAKK,KAAKI,MAAMG,YAAaiC,IAAI,KACtChD,EAAAC,EAAAC,cAAA,MAAI0C,UAAU,OAAOpC,KAAKI,MAAMC,SAChCb,EAAAC,EAAAC,cAAA,MAAI0C,UAAU,UAAUpC,KAAKI,MAAME,qBAxDnBmC,IAAMC,WCanBC,mLAVP,OACQnD,EAAAC,EAAAC,cAAA,OAAKkD,MAAM,aACPpD,EAAAC,EAAAC,cAAA,kBALC+C,IAAMC,WCkBZG,mLAXX,OACErD,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,cAPUN,aCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.ffe47255.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Header() {\r\n    return (<header>\r\n        <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" />\r\n        <p>Meme Generator</p>\r\n    </header>)\r\n \r\n}\r\nexport default Header","import React from 'react'\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            topText:\"\",\r\n            bottomText:\"\",\r\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.genMeme = this.genMeme.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => { \r\n            const {memes} = response.data\r\n            console.log(memes)\r\n            this.setState({allMemeImgs:memes})\r\n        })\r\n    }\r\n\r\n     handleChange(event) {\r\n        const {name,value} = event.target\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    genMeme(event){\r\n        event.preventDefault()\r\n        const r = Math.floor(Math.random()*(this.state.allMemeImgs.length-1))\r\n        const url = this.state.allMemeImgs[r].url\r\n        console.log('url',url)\r\n        this.setState({randomImage: url})\r\n    }\r\n\r\n    render() {\r\n    return (<div>\r\n        <form className=\"meme-form\">\r\n        <label>\r\n        Top Text\r\n        <input type=\"text\" name=\"topText\" value={this.state.topText}\r\n         onChange={this.handleChange}/>       \r\n        </label>\r\n        <label>\r\n        Bottom Text\r\n        <input type=\"text\" name=\"bottomText\" value={this.state.bottomText}\r\n         onChange={this.handleChange}/>\r\n        </label>\r\n        <button onClick={this.genMeme}>Gen</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n            <img src={this.state.randomImage} alt=\"\" />\r\n            <h2 className=\"top\">{this.state.topText}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n    </div>)\r\n}\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n                <div class=\"container\">\r\n                    <p></p>\r\n                </div>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header.js'\nimport MemeGenerator from './components/MemeGenerator.js'\nimport Footer from './components/Footer.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <Header />\n        <MemeGenerator />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}